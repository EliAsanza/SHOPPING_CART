using SHOPPINGCART.Domain.Entities;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System;
using System.Text;
using System.Globalization;
using System.Xml.Linq;

namespace SHOPPINGCART.Infrastructure.Repositories
{
    public class ProductRepository
    {
        public List<Product> Lists()
        {
            List<Product> ListProduct = new List<Product>();
            try
            {
                using (SqlConnection oconnection = new SqlConnection(Connection.cn))//Ado.Net
                {
                    StringBuilder sb = new StringBuilder();
                    sb.AppendLine("select p.ProductId,p.[Name],p.[Description],");
                    sb.AppendLine("b.BrandId,b.[Description]AS[DesBrand],");
                    sb.AppendLine("c.CategoryId,c.[Description]AS[DesCategory],");
                    sb.AppendLine("p.Price,p.Stock,p.ImagePath,p.ImageName,p.Active");
                    sb.AppendLine("from PRODUCT p");
                    sb.AppendLine("inner join BRAND b on b.BrandId = p.BrandId");
                    sb.AppendLine("inner join CATEGORY c on c.CategoryId = p.CategoryId");

                    SqlCommand cmd = new SqlCommand(sb.ToString(), oconnection);
                    cmd.CommandType = CommandType.Text;
                    oconnection.Open();

                    using (SqlDataReader dr = cmd.ExecuteReader()) //poara poder leer lo que esta dentro del query
                    {
                        while (dr.Read()) //mientras estas leyendo los datos, guarda esos datos en la lista
                        {
                            ListProduct.Add(new Product()
                            {
                                ProductId = Convert.ToInt32(dr["ProductId"]), //dr es que pueda leer
                                Name = dr["Name"].ToString(),
                                Description = dr["Description"].ToString(),
                                oBrandId = new Brand() { BrandId = Convert.ToInt32(dr["BrandId"]), Description = dr["DesBrand"].ToString() },
                                oCategoryId = new Category() { CategoryId = Convert.ToInt32(dr["CategoryId"]), Description = dr["DesCategory"].ToString() },
                                Price = Convert.ToDecimal(dr["Price"], new CultureInfo("es-SP")),
                                Stock = Convert.ToInt32(dr["Stock"]),
                                ImagePath = dr["ImagePath"].ToString(),
                                ImageName = dr["ImageName"].ToString(),
                                Active = Convert.ToBoolean(dr["Active"]),
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string error = ex.Message;
                ListProduct = new List<Product>();
            }
            return ListProduct;
        }

        public int Register(Product obj, out string Message)
        {
            int autogeneratedId = 0;
            Message = string.Empty;
            try
            {
                using (SqlConnection oconnection = new SqlConnection(Connection.cn))
                {
                    SqlCommand cmd = new SqlCommand("sp_RegistrationProduct", oconnection);
                    cmd.Parameters.AddWithValue("Name", obj.Name);
                    cmd.Parameters.AddWithValue("Description", obj.Description);
                    cmd.Parameters.AddWithValue("BrandId", obj.oBrandId.BrandId);
                    cmd.Parameters.AddWithValue("CategoryId", obj.oCategoryId.CategoryId);
                    cmd.Parameters.AddWithValue("Price", obj.Price);
                    cmd.Parameters.AddWithValue("Stock", obj.Stock);
                    cmd.Parameters.AddWithValue("Active", obj.Active);
                    cmd.Parameters.Add("Result", SqlDbType.Int).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("Message", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                    cmd.CommandType = CommandType.StoredProcedure;
                    oconnection.Open();
                    cmd.ExecuteNonQuery();
                    autogeneratedId = (int)cmd.Parameters["Result"].Value;
                    Message = cmd.Parameters["Message"].Value.ToString();
                }
            }
            catch (Exception ex)
            {
                autogeneratedId = 0;
                Message = ex.Message;
            }
            return autogeneratedId;
        }

        public bool Edit(Product obj, out string Message)
        {
            bool result = false;
            Message = string.Empty;
            try
            {
                using (SqlConnection oconnection = new SqlConnection(Connection.cn))
                {
                    SqlCommand cmd = new SqlCommand("sp_EditProduct", oconnection);
                    cmd.Parameters.AddWithValue("ProductId", obj.ProductId);
                    cmd.Parameters.AddWithValue("Name", obj.Name);
                    cmd.Parameters.AddWithValue("Description", obj.Description);
                    cmd.Parameters.AddWithValue("BrandId", obj.oBrandId.BrandId);
                    cmd.Parameters.AddWithValue("CategoryId", obj.oCategoryId.CategoryId);
                    cmd.Parameters.AddWithValue("Price", obj.Price);
                    cmd.Parameters.AddWithValue("Stock", obj.Stock);
                    cmd.Parameters.AddWithValue("Active", obj.Active);
                    cmd.Parameters.Add("Result", SqlDbType.Int).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("Message", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                    cmd.CommandType = CommandType.StoredProcedure;
                    oconnection.Open();
                    cmd.ExecuteNonQuery();
                    result = Convert.ToBoolean(cmd.Parameters["Result"].Value);
                    Message = cmd.Parameters["Message"].Value.ToString();
                }
            }
            catch (Exception ex)
            {
                result = false;
                Message = ex.Message;
            }
            return result;
        }

        public bool SaveImageData(Product oProduct, out string Message)
        {
            bool result = false;
            Message = string.Empty;
            try
            {
                using (SqlConnection oconnection = new SqlConnection(Connection.cn))
                {
                    SqlCommand cmd = new SqlCommand("sp_RegistrationProduct", oconnection);

                    string query = "Update product set ImagePath = @ImagePath, ImageName = @ImageName where ProductId = @ProductId";
                    cmd.Parameters.AddWithValue("@ImagePath", oProduct.ImagePath);
                    cmd.Parameters.AddWithValue("@ImageName", oProduct.ImageName);
                    cmd.CommandType = CommandType.Text;
                    oconnection.Open();
                    if (cmd.ExecuteNonQuery() > 0)
                    {
                        result = true;
                    }
                    else
                    {
                        Message = "Could not update image";
                    }
                }
            }
            catch (Exception ex)
            {
                result = false;
                Message = ex.Message;
            }
            return result;
        }

        public bool Delete(int productId, out string Message)
        {
            bool result = false;
            Message = string.Empty;
            try
            {
                using (SqlConnection oconnection = new SqlConnection(Connection.cn))
                {
                    SqlCommand cmd = new SqlCommand("sp_DeleteProduct", oconnection);
                    cmd.Parameters.AddWithValue("ProductId", productId);
                    cmd.Parameters.Add("Result", SqlDbType.Int).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("Message", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                    cmd.CommandType = CommandType.StoredProcedure;
                    oconnection.Open();
                    cmd.ExecuteNonQuery();
                    result = Convert.ToBoolean(cmd.Parameters["Result"].Value);
                    Message = cmd.Parameters["Message"].Value.ToString();
                }
            }
            catch (Exception ex)
            {
                result = false;
                Message = ex.Message;
            }
            return result;
        }
    }
}
