using System;
using System.Collections.Generic;
using SHOPPINGCART.Domain.Entities;
using System.Data.SqlClient;
using System.Data;
using System.Linq.Expressions;

namespace SHOPPINGCART.Infrastructure
{
    public class UserRepository
    {
        public List<User> Lists()
        {
            List<User> Listuser = new List<User>();
            try
            {
                //EntityFramework
                //clase conext, crear dbset
                //var listaUsuario = _context.Users;
                using (SqlConnection oconnection = new SqlConnection(Connection.cn))//Ado.Net
                {
                    string query = "select UserId,[Name],Lastname,Email,[Password],[Reset],Active from [USER]";

                    SqlCommand cmd = new SqlCommand(query, oconnection);
                    cmd.CommandType = CommandType.Text;
                    oconnection.Open();

                    using (SqlDataReader dr = cmd.ExecuteReader()) //poara poder leer lo que esta dentro del query
                    {
                        while (dr.Read()) //mientras estas leyendo los datos, guarda esos datos en la lista
                        {
                            Listuser.Add(new User()
                            {
                                UserId = Convert.ToInt32(dr["UserId"]), //dr es que pueda leer
                                Name = dr["Name"].ToString(),
                                LastName = dr["LastName"].ToString(),
                                Email = dr["email"].ToString(),
                                Password = dr["Password"].ToString(),
                                Reset = Convert.ToBoolean(dr["Reset"]),
                                Active = Convert.ToBoolean(dr["Active"]),
                            }
                            );
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string error = ex.Message;
                Listuser = new List<User>();
            }
            return Listuser;
        }

        public int Register(User obj, out string Message)
        {
            int autogeneratedId = 0;
            Message = string.Empty;
            try
            {
                using (SqlConnection oconnection = new SqlConnection(Connection.cn))
                {
                    SqlCommand cmd = new SqlCommand("sp_RegistrationUser", oconnection);
                    cmd.Parameters.AddWithValue("Name", obj.Name);
                    cmd.Parameters.AddWithValue("LastName", obj.LastName);
                    cmd.Parameters.AddWithValue("Email", obj.Email);
                    cmd.Parameters.AddWithValue("Password", obj.Password);
                    cmd.Parameters.AddWithValue("Active", obj.Active);
                    cmd.Parameters.Add("Result", SqlDbType.Int).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("Message", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                    cmd.CommandType = CommandType.StoredProcedure;
                    oconnection.Open();
                    cmd.ExecuteNonQuery();
                    autogeneratedId = (int)cmd.Parameters["Result"].Value;
                    Message = cmd.Parameters["Message"].Value.ToString();
                }
            }
            catch (Exception ex)
            {
                autogeneratedId = 0;
                Message = ex.Message;
            }
            return autogeneratedId;
        }

        public bool Edit(User obj, out string Message)
        {
            bool result = false;
            Message = string.Empty;

            try
            {
                using (SqlConnection oconnection = new SqlConnection(Connection.cn))
                {
                    SqlCommand cmd = new SqlCommand("sp_EditUser", oconnection);
                    cmd.Parameters.AddWithValue("UserId", obj.UserId);
                    cmd.Parameters.AddWithValue("Name", obj.Name);
                    cmd.Parameters.AddWithValue("LastName", obj.LastName);
                    cmd.Parameters.AddWithValue("Email", obj.Email);
                    cmd.Parameters.AddWithValue("Active", obj.Active);
                    cmd.Parameters.Add("Result", SqlDbType.Int).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("Message", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                    cmd.CommandType = CommandType.StoredProcedure;
                    oconnection.Open();
                    cmd.ExecuteNonQuery();
                    result = Convert.ToBoolean(cmd.Parameters["Result"].Value);
                    Message = cmd.Parameters["Message"].Value.ToString();
                }
            }
            catch (Exception ex)
            {
                result = false;
                Message = ex.Message;
            }
            return result;
        }

        public bool Delete(int id, out string Message)
        {
            bool result = false;
            Message = string.Empty;

            try
            {
                using (SqlConnection oconnection = new SqlConnection(Connection.cn))
                {
                    SqlCommand cmd = new SqlCommand("delete top (1) from [USER] where UserId = @id", oconnection);
                    cmd.Parameters.AddWithValue("@id", id);
                    cmd.CommandType = CommandType.Text;
                    oconnection.Open();
                    result = cmd.ExecuteNonQuery() > 0 ? true : false;
                }

            }
            catch (Exception ex)
            {
                result = false;
                Message = ex.Message;
            }

            return result;
        }
    }
}
